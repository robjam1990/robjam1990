[# <Node Pipeline(/*...*/)>]
[**IPLANT**];Imagination Protocol Logic - Augmentative Neural Tree.
;IPLANT is a programming language that utilizes "AI"{Artificial Intelligence}, "NLP"{Natural Language Processing} to create NodeTemplate='T'{Texturized}.
;is a simple programming language that utilizes a node-based pipeline to execute code. 
;The pipeline is a directed graph where each node is a block of code that can be executed. 
;The nodes are connected by edges that represent the flow of data between them. 
;The language is designed to be simple and easy to understand, making it ideal for beginners and experts alike.
;if Iplant try iPLANT 
;else if try iplant 
;else if try IPLANT
; end
```₦.∀
$Node(Input="input" -[Source{Code}]> Output="output"):
  $Source{Code}:                   \
	$Code: \_______________________/
	  const input = $Node.Input;  /
	  const output = input;      /
	  $Node.Output = output;    /
$Code: \______________________/
```____/__/```
```∀.iPLANT
   [-]|=~>
[-]|=0>
   <0=|[-]
[-]|=1>
   <1=|[-]
[-]|=->
   <-=|[-]
[-]|=+>
   <+=|[-]
[-]|=/>
   <\=|[-]
[-]|=x>
   <x=|[-]
[-]|=2>
   <2=|[-]
[-]|=i>
   <i=|[-]
[-]|=o>
   <o=|[-]
[-]|=r>
   <r=|[-]
[-]|=q>|
   <q=|[-]
<~=|[-]
Config=;Ad=
		₦{ns0.robjam1990.ca} 
	if else {robjam1990}
else {Self}
:Ad 
	+Ob"-|{∀}|", {Sub="ℹ"} [Re="₳"] <In="℣"> (Con="ⅈ")>.ject
℗ Protocol
	₷ Main Script
℃ "Class"
		℀ "Active Class"
℉ "Function"
		℁ "Active Script"
				℻ Function="Analogue(Connection)"
℅ "Command of"
℆ "Command Update"
₪ "Pneumatic"{in/out}"Script"
₨ "Run Script"
		℥ 1/3
™="Turing-Machine"
ℤ = "Sacred"
《》 Concurrent 
       	° Degree 
       	' String
       	" Array
		;Index
		:vertex
       	.·. Array
		:: Element
       	·.· List
....... Tetris
   :       .·.·.
   :	  :  :  : Matrix 
   "I."=#Self} Syntactical=Compound Word
:Syntactical ml="Mirror Logic" My=Machine("Feed") Language="Result of Communication" Communication="Effect of Connection" Connection="Cause"|-
:+||+
:-| Subjective="Part of Whole" Objective="Whole" Self="Word" Syntax="Word" Tactical="Word" Referrence="Word" Word="Text with Definition" :Text="Compilation of Pixels into Shapes" Shape="Compilation of Pixels into Text" Pixels="Compilation of Light into Shapes" Compilation="connection of more than one thing"
:Text="Compilation of Pixels into Shapes" Shape="Compilation of Pixels into Text" Pixels="Compilation of Light into Shapes"
:|
````$.boot
		№ "Word as a Number Denoted as a Symbol"
	:->| Think="Word", Think="Text", Think="Shape", Think="Pixel", Think="Compilation", Think="Connection", Think="Light", Think="Number", Think="Symbol", Think="Denote"
:>> Do="Word", Rephrase="Text", Draw="Shape", Particle=="Pixel", Connection="Compilation", Do="Connection", Observe="Light", Do="Math", Do="Symbol", Do="Denote"
:|~
```